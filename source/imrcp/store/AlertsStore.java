package imrcp.store;

import java.util.ArrayList;
import java.util.Collections;

/**
 * The Store for Alerts that are generated by the Imrcp system
 */
public class AlertsStore extends CsvStore
{
	/**
	 * Header for obs file
	 */
	private String m_sHEADER = "ObsType,Source,ObjId,ObsTime1,ObsTime2,TimeRecv,Lat1,Lon1,Lat2,Lon2,Elev,Value,Conf,Cleared\n";
	
	private int m_nForecastIntvl;

	
	@Override
	public void reset()
	{
		super.reset();
		m_nForecastIntvl = m_oConfig.getInt("fcstint", 3600000);
	}

	
	/**
	 * Fills the ImrcpResultSet with Obs that match the query
	 *
	 * @param oReturn ImrcpResultSet that will be filled with obs
	 * @param nType obstype id
	 * @param lStartTime start time of the query in milliseconds
	 * @param lEndTime end time of the query in milliseconds
	 * @param nStartLat lower bound of latitude (int scaled to 7 decimal places)
	 * @param nEndLat upper bound of latitude (int scaled to 7 decimals places)
	 * @param nStartLon lower bound of longitude (int scaled to 7 decimal
	 * places)
	 * @param nEndLon upper bound of longitude (int scaled to 7 decimal places)
	 * @param lRefTime reference time
	 */
	@Override
	public void getData(ImrcpResultSet oReturn, int nType, long lStartTime, long lEndTime,
	   int nStartLat, int nEndLat, int nStartLon, int nEndLon, long lRefTime)
	{
		long lObsTime = lStartTime;
		while (lObsTime < lEndTime)
		{
			AlertsCsv oFile = (AlertsCsv) getFile(lObsTime, lRefTime);
			if (oFile != null)
				getDataFromFile(oReturn, nType, lStartTime, lEndTime, nStartLat, nEndLat, nStartLon, nEndLon, lRefTime, oFile);
			lObsTime += m_nFileFrequency;
		}
		AlertsCsv oFile = (AlertsCsv) getFile(lObsTime, lRefTime); // always do an extra file
		if (oFile != null)
			getDataFromFile(oReturn, nType, lStartTime, lEndTime, nStartLat, nEndLat, nStartLon, nEndLon, lRefTime, oFile);
	}


	/**
	 * Fills the ImrcpResultSet with Obs from the given csv file that match the
	 * query.
	 *
	 * @param oReturn
	 * @param nType
	 * @param lStartTime
	 * @param lEndTime
	 * @param nStartLat
	 * @param nEndLat
	 * @param nStartLon
	 * @param nEndLon
	 * @param lRefTime
	 * @param oFile
	 */
	@Override
	public void getDataFromFile(ImrcpResultSet oReturn, int nType, long lStartTime, long lEndTime,
	   int nStartLat, int nEndLat, int nStartLon, int nEndLon, long lRefTime, CsvWrapper oFile)
	{
		synchronized (oFile)
		{
			oFile.m_lLastUsed = System.currentTimeMillis();
			ArrayList<Obs> oObsList = oFile.m_oObs;
			if (oFile.m_oObs.isEmpty())
				return;

			for (int i = 0; i < oObsList.size(); i++)
			{
				AlertObs oObs = (AlertObs) oObsList.get(i);
				if ((oObs.m_lTimeRecv <= lRefTime || oObs.m_lTimeRecv > oObs.m_lObsTime1) && (oObs.m_lTimeRecv + m_nForecastIntvl > lRefTime) && oObs.matches(nType, lStartTime, lEndTime, nStartLat, nEndLat, nStartLon, nEndLon))
				{
					int nIndex = Collections.binarySearch(oReturn, oObs, Obs.g_oCompByTimeTypeContribLatLon);
					if (nIndex < 0)
						oReturn.add(~nIndex, oObs);
					else
						oReturn.set(nIndex, oObs);
				}
			}
		}
	}


	/**
	 * Returns a new instance of CsvWrapper, since this is a CsvStore
	 *
	 * @return new CsvWrapper
	 */
	@Override
	protected FileWrapper getNewFileWrapper()
	{
		return new AlertsCsv(m_nSubObsTypes);
	}
}
