package imrcp.store;

import imrcp.system.CsvReader;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;

/**
 * The file wrapper for files generated by the CAP collector
 */
public class CAPCsv extends CsvWrapper implements Comparator<CAPObs>
{

	final ArrayList<CAPObs> m_oCapObs = new ArrayList();


	public CAPCsv(int[] nObsTypes)
	{
		super(nObsTypes);
	}


	/**
	 * Loads the file into memory. If it is a file that is already in memory it
	 * continues reading from the last file position the BufferedReader was at.
	 *
	 * @param lStartTime the time the file starts being valid
	 * @param lEndTime the time the file stops being valid
	 * @param sFilename absolute path of the file to load
	 * @throws Exception
	 */
	@Override
	public void load(long lStartTime, long lEndTime, long lValidTime, String sFilename, int nContribId) throws Exception
	{
		if (m_oCsvFile == null)
		{
			m_oCsvFile = new CsvReader(new FileInputStream(sFilename));
			m_oCsvFile.readLine(); // skip header
		}


		synchronized (m_oCapObs)
		{
			int nCol;
			while ((nCol = m_oCsvFile.readLine()) > 0)
			{
				if (nCol == 1 && m_oCsvFile.isNull(0)) // skip blank lines
					continue;

				CAPObs oObs = new CAPObs(m_oCsvFile);
				int nIndex = Collections.binarySearch(m_oCapObs, oObs, this);
				if (nIndex >= 0) // update existing alerts
				{
					if (Double.isFinite(oObs.m_dValue)) // m_dValue is set to NaN if the obs is used to closed an existing obs
						m_oCapObs.add(nIndex, oObs);
					else if (nIndex != 0)
						m_oCapObs.get(nIndex - 1).m_lClearedTime = oObs.m_lTimeRecv;
				}
				else // add new alerts
				{
					nIndex = ~nIndex;
					if (nIndex != 0)
					{
						CAPObs oPrevious = m_oCapObs.get(nIndex - 1);
						if (oPrevious.m_sId.compareTo(oObs.m_sId) == 0 && oPrevious.m_nLat1 == oObs.m_nLat1 && oPrevious.m_nLon1 == oObs.m_nLon1 && oPrevious.m_nLat2 == oObs.m_nLat2 && oPrevious.m_nLon2 == oObs.m_nLon2)
							oObs.m_lClearedTime = oPrevious.m_lTimeRecv;
					}
					m_oCapObs.add(nIndex, oObs);
				}
			}
		}
		setTimes(lValidTime, lStartTime, lEndTime);
		m_sFilename = sFilename;
		m_nContribId = nContribId;
	}


	/**
	 * Cleans up resources when the file is taken out of memory.
	 */
	@Override
	public void cleanup(boolean bDelete)
	{
		try
		{
			if (m_oCsvFile != null)
				m_oCsvFile.close();
			File oFile = new File(m_sFilename);
			if (oFile.exists() && oFile.length() <= 85) // if the file only contains the header or less, delete it
				oFile.delete();
			m_oCapObs.clear();
		}
		catch (Exception oException)
		{
			m_oLogger.error(oException, oException);
		}
	}


	/**
	 * Not Implemented
	 * @param nObsType
	 * @param lTimestamp
	 * @param nLat
	 * @param nLon
	 * @param oTimeRecv
	 * @return
	 */
	@Override
	public double getReading(int nObsType, long lTimestamp, int nLat, int nLon, Date oTimeRecv)
	{
		throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
	}


	/**
	 * Compares by Id, lat1, lon1, lat2, lon2, and time received
	 *
	 * @param o1 first CAPObs
	 * @param o2 second CAPObs
	 * @return
	 */
	@Override
	public int compare(CAPObs o1, CAPObs o2)
	{
		int nReturn = o1.m_sId.compareTo(o2.m_sId);
		if (nReturn == 0)
		{
			nReturn = o1.m_nLat1 - o2.m_nLat1; // then sort by bounding box
			if (nReturn == 0)
			{
				nReturn = o1.m_nLon1 - o2.m_nLon1;
				if (nReturn == 0)
				{
					nReturn = o1.m_nLat2 - o2.m_nLat2;
					if (nReturn == 0)
					{
						nReturn = o1.m_nLon2 - o2.m_nLon2;
						if (nReturn == 0)
							nReturn = Long.compare(o1.m_lTimeRecv, o2.m_lTimeRecv);
					}
				}
			}
		}
		return nReturn;
	}
}
