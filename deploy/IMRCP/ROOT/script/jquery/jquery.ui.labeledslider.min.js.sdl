
function findNearest(includeLeft, includeRight, value, allowedValues)
{
  var nearest = null;
  var diff = null;
  var values = allowedValues;
  for (var i = 0; i < values.length; i++)
  {
    if ((includeLeft && values[i] <= value) || (includeRight && values[i] >= value))
    {
      var newDiff = Math.abs(value - values[i]);
      if (diff === null || newDiff < diff)
      {
        nearest = values[i];
        diff = newDiff;
      }
    }
  }
  return nearest;
}


function _writeLabel(label, percentage, element)
{

  var el = $('<label>' + label + '</label>').css('left', percentage);

  $(element).append(el);
}


function writeTicks(tickValues, valueRange, minValue, appendElement)
{
  var arrayLength = tickValues.length;

  for (var i = 0; i < arrayLength; i++)
  {
    var value = tickValues[i];

    var leftPercent = ((value - minValue) / valueRange * 100) + '%';


    var tick = $('<div></div>').css('left', leftPercent).addClass('label-tick');
    $(appendElement).append(tick);
  }
}

function writeLabels(labelValues, valueRange, minValue, appendElement, labels, defaultLabelFn)
{
  var arrayLength = labelValues.length;

  //use the values themselves as the labels if nothing was passed in


  for (var i = 0; i < arrayLength; i++)
  {
    var value = labelValues[i];

    var leftPercent = ((value - minValue) / valueRange * 100) + '%';

    var label = (labels && labels[value]) ? labels[value] : defaultLabelFn(value);

    _writeLabel(label, leftPercent, appendElement);
  }
}

$.widget("sp.labeledSlider", $.ui.slider, {

  options: {
    defaultLabelFn: function (value)
    {
      return value;
    },
    slide: function (event, ui)
    {
      var jqthis = $(this);
      var allowedValues = jqthis.labeledSlider("allowedValues");
      if (!allowedValues || allowedValues.length === 0)
        return;

      var includeLeft = event.keyCode !== $.ui.keyCode.RIGHT;
      var includeRight = event.keyCode !== $.ui.keyCode.LEFT;

      if (ui.values)
      {
        jqthis.labeledSlider('values', 0, findNearest(includeLeft, includeRight, ui.values[0], jqthis.labeledSlider("allowedValues")));//allowedValues
        jqthis.labeledSlider('values', 1, findNearest(includeLeft, includeRight, ui.values[1], jqthis.labeledSlider("allowedValues")));//allowedValues
      }
      else
        jqthis.labeledSlider('value', findNearest(includeLeft, includeRight, ui.value, jqthis.labeledSlider("allowedValues")));//allowedValues

      return false;
    }
  },

  _create: function ( )
  {


    var options = this.options;

    if (options.labelValues)
      $('<div class="ui-widget-content slider-label-spacer"></div>').insertAfter($(this.element).wrap('<div class="ui-widget-content slider-container"></div>').parent());

    this._super();
    //this._drawLabels();

//    writeTicks(values, 240 - (-60), -60, document.getElementById('slider'));
//    writeLabels([-60, -30, 0, 30, 60, 120, 180, 240], 240 - (-60), -60, document.getElementById('slider'), {0: String("00" + (currentDate.getHours())).slice(-2) + ':' + String("00" + (currentDate.getMinutes())).slice(-2)});g


    var range = options.max - options.min;

    var tickValues;
    if (options.tickValues)
      tickValues = options.tickValues;
    else if (options.allowedValues && options.writeTicks)
      tickValues = options.allowedValues;

    if (tickValues)
      writeTicks(tickValues, range, options.min, this.element);
    if (options.labelValues)
      writeLabels(options.labelValues, range, options.min, this.element, options.labels, options.defaultLabelFn);
  },
  allowedValues: function (  )
  {
    return this.options.allowedValues;
  },

  _drawLabels: function ()
  {


    //
    // Add labels to slider whose values
    // are specified by min, max and whose
    // step is set to 1
    //

    // Get the options for this slider
    var opt = this.options;
    var valueRange = (opt.max - opt.min);


    if (opt.labelValues)
    {
      var arrayLength = opt.labelValues.length;
      for (var i = 0; i < arrayLength; i++)
      {
        value = opt.labelValues[i];

        var leftPercent = ((value - opt.min) / valueRange * 100) + '%';

        _writeLabel(value, leftPercent, this.element);
      }
    }
    else
    {

      if (opt.labelInterval > 0 && valueRange % opt.labelInterval === 0)
      {
        // Space out values
        for (var i = 0; i <= valueRange; i += opt.labelInterval)
        {
          var leftPercent = (i / valueRange * 100) + '%';
          var value = (opt.min + i);

          this._writeValueLabel(value, leftPercent);
        }
      }
    }

    if (opt.tickValues)
    {
      var arrayLength = opt.tickValues.length;
      for (var i = 0; i < arrayLength; i++)
      {
        value = opt.tickValues[i];

        var leftPercent = ((value - opt.min) / valueRange * 100) + '%';


        var tick = $('<div></div>').css('left', leftPercent).addClass('label-tick');
        $(this.element).append(tick);
      }
    }
    else
    {
      if (opt.tickInterval > 0 && (opt.max - opt.min) % opt.tickInterval === 0)
      {
        // Space out values
        for (var i = 0; i <= valueRange; i += opt.tickInterval)
        {
          var leftPercent = (i / valueRange * 100) + '%';

          var tick = $('<div></div>').css('left', leftPercent).addClass('label-tick');
          $(this.element).append(tick);

        }
      }
    }

  }
//  ,
//
//  _setOption: function (key, value)
//  {
//
//    this._super(key, value);
//
////
////    switch (key)
////    {
////
////      case 'tickInterval':
////      case 'tickLabels':
////      case 'tickArray':
////      case 'min':
////      case 'max':
////      case 'step':
////
////        this._alignWithStep();
////        this._drawLabels();
////        break;
////
////      case 'orientation':
////
////        this.element
////                .removeClass('horizontal vertical')
////                .addClass(this.orientation);
////
////        this._drawLabels();
////        break;
////    }
//  },
//
//  _alignWithStep: function ()
//  {
//    if (this.options.tickInterval < this.options.step)
//      this.tickInterval = this.options.step;
//    else
//      this.tickInterval = this.options.tickInterval;
//  }
});


